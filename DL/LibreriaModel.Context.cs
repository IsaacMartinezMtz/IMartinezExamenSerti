//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ExamenBBabelEntities : DbContext
    {
        public ExamenBBabelEntities()
            : base("name=ExamenBBabelEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Libros> Libros { get; set; }
        public virtual DbSet<Localizacion> Localizacion { get; set; }
    
        public virtual int Actualizar(Nullable<int> numeroVolumne, Nullable<int> idLibro, string titulo, string estante, string sala, string librero, string posicion)
        {
            var numeroVolumneParameter = numeroVolumne.HasValue ?
                new ObjectParameter("NumeroVolumne", numeroVolumne) :
                new ObjectParameter("NumeroVolumne", typeof(int));
    
            var idLibroParameter = idLibro.HasValue ?
                new ObjectParameter("IdLibro", idLibro) :
                new ObjectParameter("IdLibro", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var estanteParameter = estante != null ?
                new ObjectParameter("Estante", estante) :
                new ObjectParameter("Estante", typeof(string));
    
            var salaParameter = sala != null ?
                new ObjectParameter("Sala", sala) :
                new ObjectParameter("Sala", typeof(string));
    
            var libreroParameter = librero != null ?
                new ObjectParameter("Librero", librero) :
                new ObjectParameter("Librero", typeof(string));
    
            var posicionParameter = posicion != null ?
                new ObjectParameter("Posicion", posicion) :
                new ObjectParameter("Posicion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Actualizar", numeroVolumneParameter, idLibroParameter, tituloParameter, estanteParameter, salaParameter, libreroParameter, posicionParameter);
        }
    
        public virtual int Agregar(Nullable<int> numeroVolumne, string titulo, string estante, string sala, string librero, string posicion)
        {
            var numeroVolumneParameter = numeroVolumne.HasValue ?
                new ObjectParameter("NumeroVolumne", numeroVolumne) :
                new ObjectParameter("NumeroVolumne", typeof(int));
    
            var tituloParameter = titulo != null ?
                new ObjectParameter("Titulo", titulo) :
                new ObjectParameter("Titulo", typeof(string));
    
            var estanteParameter = estante != null ?
                new ObjectParameter("Estante", estante) :
                new ObjectParameter("Estante", typeof(string));
    
            var salaParameter = sala != null ?
                new ObjectParameter("Sala", sala) :
                new ObjectParameter("Sala", typeof(string));
    
            var libreroParameter = librero != null ?
                new ObjectParameter("Librero", librero) :
                new ObjectParameter("Librero", typeof(string));
    
            var posicionParameter = posicion != null ?
                new ObjectParameter("Posicion", posicion) :
                new ObjectParameter("Posicion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Agregar", numeroVolumneParameter, tituloParameter, estanteParameter, salaParameter, libreroParameter, posicionParameter);
        }
    
        public virtual int Eliminar(Nullable<int> idLibro)
        {
            var idLibroParameter = idLibro.HasValue ?
                new ObjectParameter("IdLibro", idLibro) :
                new ObjectParameter("IdLibro", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Eliminar", idLibroParameter);
        }
    
        public virtual ObjectResult<GetAll_Result> GetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAll_Result>("GetAll");
        }
    
        public virtual ObjectResult<GetById_Result> GetById(Nullable<int> idLibro)
        {
            var idLibroParameter = idLibro.HasValue ?
                new ObjectParameter("IdLibro", idLibro) :
                new ObjectParameter("IdLibro", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetById_Result>("GetById", idLibroParameter);
        }
    }
}
